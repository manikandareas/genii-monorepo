---
description: Guidelines for TypeScript programming and NestJS framework usage
globs: apps/api/**/*.ts
alwaysApply: false
---

### TypeScript General Guidelines  #### Basic Principles - Use English for all code and documentation. - Always declare the type of each variable and function (parameters and return value).   - Avoid using any.   - Create necessary types. - Use JSDoc to document public classes and methods. - Don't leave blank lines within a function. - One export per file.  #### Nomenclature - Use PascalCase for classes. - Use camelCase for variables, functions, and methods. - Use kebab-case for file and directory names. - Use UPPERCASE for environment variables.   - Avoid magic numbers and define constants. - Start each function with a verb. - Use verbs for boolean variables (e.g., isLoading, hasError, canDelete). - Use complete words instead of abbreviations and correct spelling.  #### Functions - Write short functions with a single purpose (less than 20 instructions). - Name functions with a verb and something else.   - If it returns a boolean, use isX or hasX, canX, etc.   - If it doesn't return anything, use executeX or saveX, etc. - Avoid nesting blocks by:   - Early checks and returns.   - Extraction to utility functions. - Use higher-order functions (map, filter, reduce, etc.) to avoid function nesting. - Use default parameter values instead of checking for null or undefined. - Reduce function parameters using RO-RO (Return Object, Receive Object).  #### Data - Don't abuse primitive types; encapsulate data in composite types. - Prefer immutability for data.   - Use readonly for data that doesn't change.   - Use as const for literals that don't change.  #### Classes - Follow SOLID principles. - Prefer composition over inheritance. - Write small classes with a single purpose (less than 200 instructions, less than 10 public methods, less than 10 properties).  #### Exceptions - Use exceptions to handle unexpected errors. - If you catch an exception, it should be to fix an expected problem or add context.  #### Testing - Follow the Arrange-Act-Assert convention for tests. - Write unit tests for each public function. - Write acceptance tests for each module.  ### Specific to NestJS  #### Basic Principles - Use modular architecture. - Encapsulate the API in modules.   - One module per main domain/route.   - One controller for its route.   - A models folder with data types (DTOs validated with class-validator).   - A services module with business logic and persistence. - A core module for Nest artifacts (global filters, middlewares, guards, interceptors). - A shared module for services shared between modules.  #### Testing - Use Jest for testing. - Write tests for each controller and service. - Write end-to-end tests for each API module.

- You can @ files here
- You can use markdown but dont have to
